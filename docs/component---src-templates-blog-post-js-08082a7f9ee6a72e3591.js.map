{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./src/components/Bio.js","webpack:///./node_modules/core-js/modules/es6.reflect.construct.js","webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["BlogPostTemplate","render","post","this","props","data","mdx","siteTitle","site","siteMetadata","title","pageContext","previous","next","console","log","location","frontmatter","description","excerpt","style","display","marginBottom","marginTop","date","body","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","React","Component","pageQuery","bioQuery","Bio","query","author","social","fixed","avatar","childImageSharp","alt","marginRight","minWidth","borderRadius","href","twitter","$export","create","aFunction","anObject","isObject","fails","bind","rConstruct","Reflect","construct","NEW_TARGET_BUG","F","ARGS_BUG","S","Target","args","newTarget","arguments","length","$args","push","apply","proto","prototype","instance","Object","result","Function","call","MDXRenderer","require","module","useMDXComponents","useMDXScope","scope","components","children","mdxComponents","mdxScope","End","fullScope","keys","values","key","fn"],"mappings":"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","file":"component---src-templates-blog-post-js-08082a7f9ee6a72e3591.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\n\nimport Bio from '../components/Bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport '../styles/global.css'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.mdx\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n    console.log(this.props.pageContext)\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={post.frontmatter.title} description={post.excerpt} />\n        <h1>{post.frontmatter.title}</h1>\n        <p\n          style={{\n            display: `block`,\n            marginBottom: '0.5rem',\n            marginTop: '0.5rem',\n          }}\n        >\n          {post.frontmatter.date}\n        </p>\n        <MDXRenderer>{post.body}</MDXRenderer>\n        <hr\n          style={{\n            marginBottom: '0.5rem',\n          }}\n        />\n        <Bio />\n\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n      body\n    }\n  }\n`\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author, social } = data.site.siteMetadata\n        return (\n          <div\n            style={{\n              display: `flex`,\n              marginBottom: '2.0rem',\n              marginTop: '3rem',\n            }}\n          >\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              style={{\n                marginRight: '0.5rem',\n                marginBottom: 0,\n                minWidth: 50,\n                borderRadius: `100%`,\n              }}\n            />\n            <p>\n              Written by <strong>{author}</strong> who lives and works in\n              Southern Oregon.\n              {` `}\n              <a href={`https://twitter.com/${social.twitter}`}>\n                You should follow him on Twitter\n              </a>\n            </p>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`\n\nexport default Bio\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}